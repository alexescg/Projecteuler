/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package projecteuler;

/**
 *
 * @author eruiz
 */
public class ProjectEuler {

    /**
     * @param args the command line arguments
     */
    public static void main(String... args) {
        // TODO code application logic here

        problem4();

    }

    private static void problem1() {
//        Problem 1
//        If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.
//        Find the sum of all the multiples of 3 or 5 below 1000.
        Integer sum = 0;
        for (int i = 1; i < 1000; i++) {

            if (i % 3 == 0 || i % 5 == 0) {
                sum = sum + i;
                System.out.println(sum);
            }

        }

    }

    private static void problem2() {

//        Problem 2
//        Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
//        1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
//        By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
//        
//    
        Integer fibo = 1;
        Integer a;
        Integer b = 1;
        Integer sum = 0;

        while (fibo < 4000000) {
            a = b;
            fibo = a + fibo;
            b = fibo - b;
            if (fibo % 2 == 0) {
                sum += fibo;
            }
        }
        System.out.println(sum);

    }

    private static void problem3() {

//        The prime factors of 13195 are 5, 7, 13 and 29.
//        What is the largest prime factor of the number 600851475143 ?
        long n = 600851475143l;
        for (int i = 2; i < n / 2; i++) {
            Integer prime = 0;
            for (int j = 1; j <= i; j++) {
                if (i % j == 0 && n % i == 0) {
                    prime++;
                }
            }
            if (prime == 2) {
                System.out.println(i);
            }
        }

    }

    private static void problem4() {
//            A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 Ã— 99.
//            Find the largest palindrome made from the product of two 3-digit numbers.
        Integer palindrome = 1;
        Integer c;
        for (int i = 100; i <= 999; i++) {
            for (int j = 101; j <= 999; j++) {
                c = i * j;

                ProjectEuler pe = new ProjectEuler();
                if (c > palindrome && pe.isPalindrome(c) == c) {

                    palindrome = c;

                }

            }

        }
        //System.out.println(palindrome);

    }

    private static void problemaString() {
       
       //String cade ="wasdwasdwasdwasdwasdwasdwasdwasdwasdwasdwasdwasdwasdwasdwasdwasdwasdwasdwasdwasdwasdwasdwasdwasdwasdwasdwasdwasdwasdwasdwasdwasdwasdwasdwasdwasdwasdwasdwasdwasdwasdwasdwasdwasdwasdwasdwasdwasdwasdwasdwasdwasdwasdwasdwasdwasdwasdwasdwasd";
       String cade ="wasdwasdwasdwasdwasdwasdwasdwasdwasdwasdwasdwasdwasdwasdwasdwasdwasdwasdwasdwasdwasdwasdwasdwasdwasdwasdwasdwasdwasdwasdwasdwasdwasdwasdwasdwasdwasdwasdwasdwasdwasdwasdwasdwasdwasdwasdwasdwasdwasdwasdwasdwasdwasdwasdwasdwasdwasdwasdwasdwasdwasdwasdwasdwasdwasdwasdwasdwasd";
        char[] x = cade.toCharArray();
       Boolean ok = Boolean.TRUE;
       for(int i = 0; i < cade.length(); i+=4 ) ok = ok && (x[i] == 'w' &&  x[i+1] == 'a' && x[i+2] == 's' && x[i+3] == 'd');
       System.out.println(ok);
    
    }

    private int isPalindrome(Integer num) {
        int divLength = num.toString().length();
        
//        while (num % div == 0) {
//            div *= 10;
//        }

        int div = 1;
        for (int i = 1; i < divLength; i++) {
           // div = 
            
        }
        
        int res = 0;
        while (num >= res) {

            num /= div;
            res += num;
            div /= 10;

        }
        return res;

    }

    
}
